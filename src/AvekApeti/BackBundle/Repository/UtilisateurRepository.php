<?php

namespace AvekApeti\BackBundle\Repository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

class UtilisateurRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($loginOrEmail)
    {
        // TODO: Implement loadUserByUsername() method.
        /*  $user = $this->createQueryBuilder('u')
                  ->select('u')
                  ->where('u.login = :login OR  u.email = :email')
                  ->setParameters([
                      'login' => $loginOrEmail,
                      'email' => $loginOrEmail
                  ])->getQuery()->getOneOrNullResult();*/
        $user = $this->createQueryBuilder('u')
            ->select('u, g')
            ->join('u.groupe', 'g')
            ->where('u.login = :login OR u.email = :email')
            ->setParameter('login', $loginOrEmail)
            ->setParameter('email', $loginOrEmail)
            ->getQuery()
            ->getOneOrNullResult();

        if (null == $user)
        {
            $message = sprintf(
                'Impossible de trouver un utilisateur avec le login ou le mot de passe suivant "%s".',
                $loginOrEmail
            );
            throw new UsernameNotFoundException($message);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        // TODO: Implement refreshUser() method.
        $class = get_class($user); // $class Troiswa\BackBundle\Entity\User
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->loadUserByUsername($user->getLogin());
    }

    public function supportsClass($class)
    {
        // TODO: Implement supportsClass() method.
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }
}
